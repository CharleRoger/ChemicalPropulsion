// Bipropellant
// [L*q*d*] is intended to target LiquidFuel, LqdHydrogen and LqdMethane
@PART:HAS[~chemTechTankType,@RESOURCE[L*q*d*],@RESOURCE[Oxidizer],!MODULE:HAS[@PROPELLANT[L*q*d*],@PROPELLANT[Oxidizer]],!MODULE:HAS[#resourceName[L*q*d*],#resourceName[Oxidizer]]]:BEFORE[zz_ChemicalPropulsion]
{
	// Pure tank containing LiquidFuel and Oxidizer
	chemTechTankType = bipropellant
}
@PART:HAS[@RESOURCE[L*q*d*],@RESOURCE[Oxidizer]]:FOR[zz_ChemicalPropulsion]
{
	// Any part containing LiquidFuel and Oxidizer
	chemTechAmountLiquidFuel = #$RESOURCE[L*q*d*]/maxAmount$
	chemTechAmountOxidizer = #$RESOURCE[Oxidizer]/maxAmount$
	chemTechTankVolumeFuelOxidizer = #$chemTechAmountLiquidFuel$
	@chemTechTankVolumeFuelOxidizer += #$chemTechAmountOxidizer$
	chemTechTankCostFuelOxidizer = #$chemTechAmountOxidizer$
	@chemTechTankCostFuelOxidizer *= #$@RESOURCE_DEFINITION[Oxidizer]/unitCost$
	@chemTechTankVolumeFuelOxidizer *= 5
	-RESOURCE[Oxidizer] {}
}
@PART:HAS[#chemTechTankVolumeFuelOxidizer,@RESOURCE[LiquidFuel]]:FOR[zz_ChemicalPropulsion]
{
	chemTechCostLiquidFuel = #$@RESOURCE_DEFINITION[LiquidFuel]/unitCost$
	@chemTechCostLiquidFuel *= #$chemTechAmountLiquidFuel$
	@chemTechTankCostFuelOxidizer += #$chemTechCostLiquidFuel$
	-RESOURCE[LiquidFuel] {}
}
@PART:HAS[#chemTechTankVolumeFuelOxidizer,@RESOURCE[LqdMethane]]:FOR[zz_ChemicalPropulsion]
{
	chemTechCostLqdMethane = #$@RESOURCE_DEFINITION[LqdMethane]/unitCost$
	@chemTechCostLqdMethane *= #$chemTechAmountLiquidFuel$
	@chemTechTankCostFuelOxidizer += #$chemTechCostLqdMethane$
	-RESOURCE[LqdMethane] {}
}
@PART:HAS[#chemTechTankVolumeFuelOxidizer,@RESOURCE[LqdHydrogen]]:FOR[zz_ChemicalPropulsion]
{
	chemTechCostLqdHydrogen = #$@RESOURCE_DEFINITION[LqdHydrogen]/unitCost$
	@chemTechCostLqdHydrogen *= #$chemTechAmountLiquidFuel$
	@chemTechTankCostFuelOxidizer += #$chemTechCostLqdHydrogen$
	-RESOURCE[LqdHydrogen] {}
}
@PART:HAS[#chemTechTankType[bipropellant]]:FOR[zz_ChemicalPropulsion]
{
	// Assign resource options for pure tank
	chemTechFuel = Kerosene
	chemTechFuel = Hydrazine
	chemTechFuel = LqdHydrogen
	chemTechOxidizer = LqdOxygen
	chemTechOxidizer = NTO
}

// Aviation
@PART:HAS[~chemTechTankType,@RESOURCE[LiquidFuel],!RESOURCE[Oxidizer],!MODULE:HAS[@PROPELLANT[LiquidFuel],!PROPELLANT[Oxidizer]],!MODULE:HAS[#resourceName[LiquidFuel]]]:BEFORE[zz_ChemicalPropulsion]
{
	// Pure tank containing LiquidFuel and not Oxidizer
	chemTechTankType = aviation
}
@PART:HAS[@RESOURCE[LiquidFuel],!RESOURCE[Oxidizer]]:FOR[zz_ChemicalPropulsion]
{
	// Any part containing LiquidFuel and no Oxidizer
	chemTechTankVolumeFuel = #$RESOURCE[LiquidFuel]/maxAmount$
	chemTechTankCostFuel = #$chemTechTankVolumeFuel$
	@chemTechTankCostFuel *= #$@RESOURCE_DEFINITION[LiquidFuel]/unitCost$
	@chemTechTankVolumeFuel *= 5
	-RESOURCE[LiquidFuel] {}
}
@PART:HAS[#chemTechTankType[aviation]]:FOR[zz_ChemicalPropulsion]
{
	// Assign resource options for pure tank
	chemTechFuel = Kerosene
	chemTechFuel = LqdHydrogen
}

// Cryogenic
@PART:HAS[~chemTechTankType,@RESOURCE[LqdHydrogen],!RESOURCE[Oxidizer],!MODULE:HAS[@PROPELLANT[LqdHydrogen],!PROPELLANT[Oxidizer]],!MODULE:HAS[#resourceName[LqdHydrogen]]]:BEFORE[zz_ChemicalPropulsion]
{
	// Pure tank containing LqdHydrogen and not Oxidizer
	chemTechTankType = cryogenic
}
@PART:HAS[@RESOURCE[LqdHydrogen],!RESOURCE[Oxidizer]]:FOR[zz_ChemicalPropulsion]
{
	// Any part containing LqdHydrogen and no Oxidizer
	chemTechTankVolumePropellant = #$RESOURCE[LqdHydrogen]/maxAmount$
	chemTechTankCostPropellant = #$chemTechTankVolumePropellant$
	@chemTechTankCostPropellant *= #$@RESOURCE_DEFINITION[LqdHydrogen]/unitCost$
	@chemTechTankVolumePropellant /= 1.5
	-RESOURCE[LqdHydrogen] {}
}
@PART:HAS[#chemTechTankType[cryogenic]]:FOR[zz_ChemicalPropulsion]
{
	// Assign resource options for pure tank
	chemTechPropellant = LqdOxygen
	chemTechPropellant = LqdHydrogen
}

// Monopropellant
@PART:HAS[~chemTechTankType,@RESOURCE[MonoPropellant],!MODULE:HAS[@PROPELLANT[MonoPropellant]],!MODULE:HAS[#resourceName[MonoPropellant]]]:BEFORE[zz_ChemicalPropulsion]
{
	// Pure tank containing MonoPropellant
	chemTechTankType = monopropellant
}
@PART:HAS[@RESOURCE[MonoPropellant]]:FOR[zz_ChemicalPropulsion]
{
	// Any part containing MonoPropellant
	chemTechTankVolumePropellant = #$RESOURCE[MonoPropellant]/maxAmount$
	chemTechTankCostPropellant = #$chemTechTankVolumePropellant$
	@chemTechTankCostPropellant *= #$@RESOURCE_DEFINITION[MonoPropellant]/unitCost$
	@chemTechTankVolumePropellant *= 4
	-RESOURCE[MonoPropellant] {}
}
@PART:HAS[#chemTechTankType[monopropellant]]:FOR[zz_ChemicalPropulsion]
{
	// Assign resource options for pure tank
	chemTechPropellant = HTP
	chemTechPropellant = Hydrazine
	chemTechPropellant = TEATEB
}

// Solid fuel
@PART:HAS[@RESOURCE[SolidFuel]]:FOR[zz_ChemicalPropulsion]
{
	chemTechTankVolumePropellant = #$RESOURCE[SolidFuel]/maxAmount$
	chemTechTankCostPropellant = #$chemTechTankVolumePropellant$
	@chemTechTankCostPropellant *= #$@RESOURCE_DEFINITION[SolidFuel]/unitCost$
	@chemTechTankVolumePropellant *= 5
	-RESOURCE[SolidFuel] {}
}

// Compute tank mass offset
@PART:HAS[#chemTechTankVolumeFuelOxidizer]:FOR[zz_ChemicalPropulsion]
{
	chemTechTankMassFuelOxidizer = #$chemTechTankVolumeFuelOxidizer$
	@chemTechTankMassFuelOxidizer *= 0.000125
}
@PART:HAS[#chemTechTankVolumeFuelOxidizer]:FOR[zz_ChemicalPropulsion]
{
	chemTechTankMassFuel = #$chemTechTankVolumeFuel$
	@chemTechTankMassFuel *= 0.000125
}
@PART:HAS[#chemTechTankVolumePropellant]:FOR[zz_ChemicalPropulsion]
{
	chemTechTankMassPropellant = #$chemTechTankVolumePropellant$
	@chemTechTankMassPropellant *= 0.000125
}
@PART:HAS[#chemTechTankMassPropellant,#chemTechPropellant[LqdHydrogen]]:FOR[zz_ChemicalPropulsion]
{
	@chemTechTankMassPropellant *= 0.17004
}